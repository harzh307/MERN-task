# Stage 1: Build
FROM node:20-alpine AS builder

# Create app directory
WORKDIR /usr/src/app

# Copy package files
COPY package.json yarn.lock ./

# Install jq for proper JSON manipulation
RUN apk add --no-cache jq

# Remove packageManager field using jq
RUN cat package.json | jq 'del(.packageManager)' > package.json.tmp && mv package.json.tmp package.json

# Install dependencies
RUN npm install

# Copy source code
COPY . .

# Build TypeScript
RUN npm run build

# Stage 2: Production
FROM node:20-alpine

# Install dumb-init for proper signal handling
RUN apk add --no-cache dumb-init

# Create app directory and non-root user
WORKDIR /usr/src/app
RUN addgroup -g 1001 appuser && \
    adduser -u 1001 -G appuser -s /bin/sh -D appuser

# Copy package files and install production dependencies
COPY package.json yarn.lock ./
RUN apk add --no-cache jq && \
    cat package.json | jq 'del(.packageManager)' > package.json.tmp && \
    mv package.json.tmp package.json && \
    npm install --only=production && \
    apk del jq

# Copy built files from builder stage
COPY --from=builder /usr/src/app/dist ./dist

# Set ownership to non-root user
RUN chown -R appuser:appuser /usr/src/app

# Switch to non-root user
USER appuser

# Set production environment
ENV NODE_ENV=production

# Expose port
EXPOSE 3000

# Use dumb-init as entrypoint
ENTRYPOINT ["/usr/bin/dumb-init", "--"]

# Start the app
CMD ["node", "dist/index.js"] 